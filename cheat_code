import numpy as np
import matplotlib.pyplot as plt

# Define the function for equation (3) with b=1
def rectangular_function(x, a):
    return np.where(np.abs(x) <= a, 1, 0)

# Define the function for the right side of equation (3) with b=1
def rectangular_transform(w, a):
    return 2 * np.abs(np.sin(w * a)) / w

# Define the values of 'a' and colors for each plot
a_values = [100, 10, 1, 0.1, 0.01]
colors = ['blue', 'green', 'red', 'purple', 'orange']

# Generate a range of x and omega values for plotting
x_values = np.logspace(-3, 3, 400)  # for f(x)
w_values = np.logspace(-2, 2, 400)  # for F(ω)

# Plot for f(x)
plt.figure(figsize=(10, 6))
ax1 = plt.subplot(1, 1, 1)
ax1.set_xscale('log')
ax1.set_yscale('log')
for a, color in zip(a_values, colors):
    y_values = rectangular_function(x_values, a)
    ax1.plot(x_values, y_values, label=f'a={a}', color=color)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('f(x) Log-Log Plot of Equation (3) with b=1')
plt.legend()
plt.grid(True, which="both", ls="--")
fx_log_log_plot_b1_path = './f(x)_log_log_plot(3).png'
plt.savefig(fx_log_log_plot_b1_path)
plt.close()

# Plot for F(ω)
plt.figure(figsize=(10, 6))
ax2 = plt.subplot(1, 1, 1)
ax2.set_xscale('log')
ax2.set_yscale('log')
for a, color in zip(a_values, colors):
    y_values = rectangular_transform(w_values, a)
    ax2.plot(w_values, y_values, label=f'a={a}', color=color)
plt.xlabel('ω')
plt.ylabel('F(ω)')
plt.title('F(ω) Log-Log Plot of Equation (3) with b=1')
plt.legend()
plt.grid(True, which="both", ls="--")
fomega_log_log_plot_b1_path = './F(ω)_log_log_plot(3).png'
plt.savefig(fomega_log_log_plot_b1_path)
plt.close()
